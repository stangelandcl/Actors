using System;
<# 
	foreach(var className in ClassNames){
		var Split = className.Split('.');
		var NamespaceName = "";
		for(int i=0;i<Split.Length-1;i++){
			if(i > 0) NamespaceName += ".";
			NamespaceName += Split[i];
        }
		var ClassName = Split[Split.Length-1];	
#>
namespace <#= NamespaceName #>
{
    partial <#= StructOrClass #> <#= ClassName #> : IEquatable<<#= ClassName #>>
    {
        public override bool Equals(object other)
        {		
			if(other == null || other.GetType() != GetType())
				return false;
            return Equals((<#= ClassName #>)other);
        }	

		/*public bool Equals(<#=ClassName#> other){		
			return Equals((object)other); }*/		

         public static bool operator==(<#= ClassName #> left, <#= ClassName #> right)
		 {
            if (ReferenceEquals(left, right))
			     return true;
			else if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
			      return false;
            else
                return left.Equals(right);
        }

        public static bool operator!=(<#= ClassName #> left, <#= ClassName #> right)
        {
            if (ReferenceEquals(left, right))
                return false;
            else if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
                return true;
            else
                return !left.Equals(right);
        }
    }
}

<# } // end foreach 
#>

<#+
    public void SetClassName(string structOrClass, string classes)
    {
		StructOrClass = structOrClass;
        ClassNames = classes.Split(' ');
    }
 
	string StructOrClass;
    string[] ClassNames;   

#>
